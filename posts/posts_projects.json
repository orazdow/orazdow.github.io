[
	{
		"filename": "2019-05-06-soundlib-projects.md",
		"date": "2019-05-06",
		"title": "soundlib",
		"description": "",
		"content": "#### SoundLib\r\n\r\nThis project is the start of what is to be an audio programming environment. SoundLib is just a working title, currently it's a library of objects for dsp and control.\r\n\r\n***\r\n\r\nThe main audio base-class **Sig** should provide everything needed to incorporate classes from other libraries like Stk or Maximilian:\r\n\r\n**variables:** \r\n```float* inputs[num_inlets]``` (default is 64)\r\n```float* input``` (same as inputs[0])\r\n```float output```\r\n```float val``` provided to store 1 intial value\r\n\r\n**Functions:**\r\n\r\n**-init:**\r\n```void init(uint _inlets = 1, bool _summing = auto_summing)``` sets number of active inlets, toggles summing\r\n-Each inlet is itself a summing-bus with a max of 64 parralel inputs.\r\n-This can be overriden in which case each inlet is mapped directly to the summing input, \r\n-otherwise each of the 64 inlets ```inputs[...]``` is mapped to a summing output.\r\n```void initVal(float* val, int inlet)``` points an inlet to any existing float\r\n```void setVal(float f, int inlet = 1)``` assigns a value to val and points an inlet to it\r\n\r\n**-constructors:**\r\n```Sig(double val = 0)``` (truncates to float)\r\n```Sig(uint inlets, bool summing)``` construct with n inlets, summing\r\n\r\n**-dsp:**\r\n```virtual void dsp()``` this is where a child class should implement it's dsp routine\r\n```virtual float out()``` these can be implemented to add dsp called by the user instead of being iniked by the library\r\n```virtual float out(double in)```\r\n\r\n**-connecting:**\r\n```void connect(Sig* child, uint inlet = 0)``` adds a child object to the Sig graph, disconnecting it from the root node, and connect's a's output to b's input at a specified inlet.\r\n```void disconnect(Sig* child, uint inlet = 0)``` disconnects, and will reconnect b to the root node if neccesary.\r\n\r\nThese call external ```sig_connect```/```sig_disconect``` functions which also include \r\n```sig_connect(float* a, Sig* b, uint inlet = 0)``` which will connect (or remove) any float* to an inlet \r\n\r\n**-others:**\r\n```void Call()``` this is calls dsp() and sumInputs() if summing, and is called by the dsp scheduler\r\n```virtual void bypass_summing(uint inlet = 0)``` this called by Connect/disconnect\r\n```void sumInputs()```\r\n\r\nHere is an example:\r\n\r\n\t// 2-inlet sum (like +~ in PD)\r\n   \tclass Sum : public Sig{\r\n    public:\r\n        Sum(double f = 0){\r\n            init(2); // 2 inlets\r\n            setVal(f, 1); // set default val to right inlet\r\n        }\r\n        \r\n        void dsp(){ \r\n            output = *inputs[0];\r\n            output += *inputs[1];\r\n        }\r\n    };\r\n\r\n***\r\n\r\nthe base class for control objects is **Ctl**. Control messages have a simple structure currently and all message sources are polling to generate messages, Events and a different message protocol of some kind will be incorporated. \r\n\r\nThe Msg struct has an int for number of Vals, a type field, an index that can be set by the caller, and an array of n Vals. Val is a union that can take on float int or note struct types. Depending on how parameters are parsed and from protocols like midi, osc or fudi this will likely change.\r\n\r\nCtl provides a member Msg, and the following functions:\r\n\r\n```virtual void run(Msg _m){}``` this is the control equivalent of dsp() in Sig.\r\n\r\n```virtual void run(){}```\r\n\r\n```virtual void onConnect(Ctl* child){}``` \r\n\r\n```void msg_alloc(size_t num)``` this must be called to allocate the contents of a message\r\n\r\n```void copy_msg(Msg _m)``` copy the contents of an incoming message\r\n\r\n***\r\n\r\nSig objects are in soundlib_sig.h and expr.h, which is an audio expression parser like pd's expr~ with the variables f0-f63 corresponding to it's inlets. Ctl objects are in soundlib_ctl.h.",
		"group": "projects",
		"categories": [],
		"display": true,
		"minimize": false,
		"static": false
	}
]